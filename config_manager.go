package main

import (
	"fmt"
	"os"
	"path/filepath"
	"regexp"
	"strings"
	"sync"
	"sync/atomic"
)

// Global config cache
var (
	configCache atomic.Value // stores *Config
	envCache    atomic.Value // stores map[string]string
	envOnce     sync.Once
)

// Precompiled regex for efficient env parsing
var envRegex = regexp.MustCompile(`^([A-Z_]+)=(.*)$`)

// Config configuration structure
type Config struct {
	RefreshToken string
	Proxy        string
	DeviceID     string
	DeviceName   string
}

// LoadConfig load configuration with caching
func LoadConfig() (*Config, error) {
	// Check cache first
	if cached := configCache.Load(); cached != nil {
		return cached.(*Config), nil
	}

	config := &Config{
		DeviceName: "pikpak-downloader",
	}

	// Try to load .env file with optimized method
	if err := loadEnvFileOptimized(); err != nil {
		fmt.Printf("⚠️  Unable to load .env file: %v\n", err)
	}

	// Read configuration from environment variables
	config.RefreshToken = os.Getenv("PIKPAK_REFRESH_TOKEN")
	config.Proxy = os.Getenv("PIKPAK_PROXY")
	config.DeviceID = os.Getenv("PIKPAK_DEVICE_ID")

	if deviceName := os.Getenv("PIKPAK_DEVICE_NAME"); deviceName != "" {
		config.DeviceName = deviceName
	}

	// Cache the config
	configCache.Store(config)

	return config, nil
}

// loadEnvFileOptimized load .env file with optimized I/O
func loadEnvFileOptimized() error {
	envFile := ".env"
	if _, err := os.Stat(envFile); os.IsNotExist(err) {
		return fmt.Errorf(".env file does not exist")
	}

	// Read entire file at once for better performance
	data, err := os.ReadFile(envFile)
	if err != nil {
		return fmt.Errorf("failed to read .env file: %w", err)
	}

	// Process with precompiled regex
	lines := strings.Split(string(data), "\n")
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" || strings.HasPrefix(line, "#") {
			continue
		}

		// Use precompiled regex for parsing
		if matches := envRegex.FindStringSubmatch(line); len(matches) == 3 {
			key := strings.TrimSpace(matches[1])
			value := strings.TrimSpace(matches[2])

			// Remove quotes efficiently
			if len(value) >= 2 {
				if (value[0] == '"' && value[len(value)-1] == '"') ||
					(value[0] == '\'' && value[len(value)-1] == '\'') {
					value = value[1 : len(value)-1]
				}
			}

			if err := os.Setenv(key, value); err != nil {
				fmt.Printf("Warning: failed to set environment variable %s: %v\n", key, err)
			}
		}
	}

	return nil
}

// loadEnvFileCached load and cache environment variables
func loadEnvFileCached() error {
	return loadEnvFileOptimized()
}

// atomicWriteFile 原子写入文件，防止写入过程中断导致文件损坏
func atomicWriteFile(filename string, data []byte, perm os.FileMode) error {
	tempFile := filename + ".tmp"

	// 写入临时文件
	if err := os.WriteFile(tempFile, data, perm); err != nil {
		return fmt.Errorf("failed to write temporary file: %w", err)
	}

	// 原子重命名
	if err := os.Rename(tempFile, filename); err != nil {
		// 如果重命名失败，清理临时文件
		_ = os.Remove(tempFile)
		return fmt.Errorf("failed to rename temporary file: %w", err)
	}

	return nil
}

// GeneratePikPakCLIConfig generate pikpakcli configuration file
func (c *Config) GeneratePikPakCLIConfig() error {
	configDir := getPikPakCLIConfigDir()
	if err := os.MkdirAll(configDir, 0755); err != nil {
		return fmt.Errorf("Failed to create configuration directory: %w", err)
	}

	configFile := filepath.Join(configDir, "config.yml")

	// Generate configuration content
	configContent := fmt.Sprintf(`# PikPak CLI configuration file (auto-generated by pikpak-downloader)
# Do not edit this file manually, please modify .env file

# Account authentication
refresh_token: %s

# OAuth configuration
client_id: "YNxT9w7GMdWvEOKa"
client_secret: "dbw2OtmVEeuUvIPEbTySgLTW0y6RkTs6"

# Device information
device_id: %s
device_name: %s

# Proxy settings
proxy: %s

# Download settings
download_path: "./downloads"
max_concurrent: 3

# Log settings
log_level: "info"
`,
		quoteString(c.RefreshToken),
		quoteString(c.DeviceID),
		quoteString(c.DeviceName),
		quoteString(c.Proxy),
	)

	return atomicWriteFile(configFile, []byte(configContent), 0644)
}

// quoteString add quotes to string
func quoteString(s string) string {
	if s == "" {
		return `""`
	}
	return fmt.Sprintf(`"%s"`, s)
}

// getPikPakCLIConfigDir get pikpakcli configuration directory
func getPikPakCLIConfigDir() string {
	home, _ := os.UserHomeDir()
	return filepath.Join(home, "Library", "Application Support", "pikpakcli")
}

// ValidateConfig validate if configuration is valid
func (c *Config) ValidateConfig() error {
	if c.RefreshToken == "" {
		return fmt.Errorf("Please configure refresh_token")
	}
	return nil
}

// IsConfigured check if authentication information is configured
func (c *Config) IsConfigured() bool {
	return c.RefreshToken != ""
}

// PrintConfigStatus print configuration status
func (c *Config) PrintConfigStatus() {
	fmt.Println("📋 Configuration status check:")

	if c.RefreshToken != "" {
		fmt.Println("  ✅ RefreshToken: Configured")
	} else {
		fmt.Println("  ❌ RefreshToken: Not configured")
	}

	if c.Proxy != "" {
		fmt.Printf("  ✅ Proxy: %s\n", c.Proxy)
	} else {
		fmt.Println("  ⚪ Proxy: Not configured")
	}

	if c.DeviceName != "" {
		fmt.Printf("  📱 Device name: %s\n", c.DeviceName)
	}
}
