package main

import (
	"bufio"
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

// Config configuration structure
type Config struct {
	Username     string
	Password     string
	RefreshToken string
	Proxy        string
	DeviceID     string
	DeviceName   string
}

// LoadConfig load configuration from environment variables and .env file
func LoadConfig() (*Config, error) {
	config := &Config{
		DeviceName: "pikpak-downloader",
	}

	// Try to load .env file
	if err := loadEnvFile(); err != nil {
		fmt.Printf("‚ö†Ô∏è  Unable to load .env file: %v\n", err)
	}

	// Read configuration from environment variables
	config.Username = os.Getenv("PIKPAK_USERNAME")
	config.Password = os.Getenv("PIKPAK_PASSWORD")
	config.RefreshToken = os.Getenv("PIKPAK_REFRESH_TOKEN")
	config.Proxy = os.Getenv("PIKPAK_PROXY")
	config.DeviceID = os.Getenv("PIKPAK_DEVICE_ID")

	if deviceName := os.Getenv("PIKPAK_DEVICE_NAME"); deviceName != "" {
		config.DeviceName = deviceName
	}

	return config, nil
}

// loadEnvFile load .env file
func loadEnvFile() error {
	envFile := ".env"
	if _, err := os.Stat(envFile); os.IsNotExist(err) {
		return fmt.Errorf(".env file does not exist")
	}

	file, err := os.Open(envFile)
	if err != nil {
		return err
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())

		// Skip empty lines and comments
		if line == "" || strings.HasPrefix(line, "#") {
			continue
		}

		// Parse KEY=VALUE format
		parts := strings.SplitN(line, "=", 2)
		if len(parts) != 2 {
			continue
		}

		key := strings.TrimSpace(parts[0])
		value := strings.TrimSpace(parts[1])

		// Remove quotes
		if strings.HasPrefix(value, `"`) && strings.HasSuffix(value, `"`) {
			value = strings.Trim(value, `"`)
		} else if strings.HasPrefix(value, `'`) && strings.HasSuffix(value, `'`) {
			value = strings.Trim(value, `'`)
		}

		// Set environment variable
		os.Setenv(key, value)
	}

	return scanner.Err()
}

// GeneratePikPakCLIConfig generate pikpakcli configuration file
func (c *Config) GeneratePikPakCLIConfig() error {
	configDir := getPikPakCLIConfigDir()
	if err := os.MkdirAll(configDir, 0755); err != nil {
		return fmt.Errorf("Failed to create configuration directory: %v", err)
	}

	configFile := filepath.Join(configDir, "config.yml")

	// Generate configuration content
	configContent := fmt.Sprintf(`# PikPak CLI configuration file (auto-generated by pikpak-downloader)
# Do not edit this file manually, please modify .env file

# Account authentication
username: %s
password: %s
refresh_token: %s

# OAuth configuration
client_id: "YNxT9w7GMdWvEOKa"
client_secret: "dbw2OtmVEeuUvIPEbTySgLTW0y6RkTs6"

# Device information
device_id: %s
device_name: %s

# Proxy settings
proxy: %s

# Download settings
download_path: "./downloads"
max_concurrent: 3

# Log settings
log_level: "info"
`,
		quoteString(c.Username),
		quoteString(c.Password),
		quoteString(c.RefreshToken),
		quoteString(c.DeviceID),
		quoteString(c.DeviceName),
		quoteString(c.Proxy),
	)

	return os.WriteFile(configFile, []byte(configContent), 0644)
}

// quoteString add quotes to string
func quoteString(s string) string {
	if s == "" {
		return `""`
	}
	return fmt.Sprintf(`"%s"`, s)
}

// getPikPakCLIConfigDir get pikpakcli configuration directory
func getPikPakCLIConfigDir() string {
	home, _ := os.UserHomeDir()
	return filepath.Join(home, "Library", "Application Support", "pikpakcli")
}

// ValidateConfig validate if configuration is valid
func (c *Config) ValidateConfig() error {
	if c.RefreshToken == "" && (c.Username == "" || c.Password == "") {
		return fmt.Errorf("Please configure refresh_token or username/password")
	}
	return nil
}

// IsConfigured check if authentication information is configured
func (c *Config) IsConfigured() bool {
	return c.RefreshToken != "" || (c.Username != "" && c.Password != "")
}

// PrintConfigStatus print configuration status
func (c *Config) PrintConfigStatus() {
	fmt.Println("üìã Configuration status check:")

	if c.RefreshToken != "" {
		fmt.Println("  ‚úÖ RefreshToken: Configured")
	} else {
		fmt.Println("  ‚ùå RefreshToken: Not configured")
	}

	if c.Username != "" {
		fmt.Println("  ‚úÖ Username: Configured")
	} else {
		fmt.Println("  ‚ùå Username: Not configured")
	}

	if c.Password != "" {
		fmt.Println("  ‚úÖ Password: Configured")
	} else {
		fmt.Println("  ‚ùå Password: Not configured")
	}

	if c.Proxy != "" {
		fmt.Printf("  ‚úÖ Proxy: %s\n", c.Proxy)
	} else {
		fmt.Println("  ‚ö™ Proxy: Not configured")
	}

	if c.DeviceName != "" {
		fmt.Printf("  üì± Device name: %s\n", c.DeviceName)
	}
}
